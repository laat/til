#+TITLE: Today I learned
#+AUTHOR: Sigurd Fosseng
#+EMAIL: sigurd@fosseng.net
#+OPTIONS: H:2 num:nil toc:nil \n:nil @:t ::t |:t ^:{} _:{} *:t TeX:t LaTeX:t

* JavaScript
** Parse JavasScript                                              :js:estree:
   :PROPERTIES:
   :LEARNED:  <2016-03-29 Tue>
   :END:

   [[https://github.com/ternjs/acorn][Acorn]] is transitively used by [[http://eslint.org/][eslint]] and produces [[https://github.com/estree/estree][estree]]

   #+begin_src sh
   npm i -g acorn
   #+end_src

   #+begin_src js
   var parser = require("acorn/dist/acorn_loose").parse_dammit;
   var tree = parser('import foo from "foo" // answer', {})
   console.log(tree)
   #+end_src

** Trace functional JavaScript                                     :js:debug:
   :PROPERTIES:
   :LEARNED:  <2016-03-30 Wed>
   :END:

   I have started using this snippet in IntelliJ and Emacs when
   tabbing on =_trace=. I decided against a node module because it is
   something i only use for debugging and should not be there when I
   am comitting.

   #+begin_src js
     function trace (message) { return function (x) { console.log(message, x); return x; }}; // eslint-disable-line
   #+end_src

   #+RESULTS:

   Easier to read multiple lines:
   #+begin_src js
     function trace (message) {
         return function (x) {
             console.log(message, x);
             return x;
         }
     };
   #+end_src

   Example usage:
   #+begin_src js :results output
     function trace (message) { return function (x) { console.log(message, x); return x; }}; // eslint-disable-line

     function addOne(x) {
         return x + 1;
     }
     // add one twise, one inside trace, one after
     var res = [1, 2, 3]
         .map(trace('list value'))
         .map(addOne)
     console.log(res)
   #+end_src

   #+RESULTS:
   : list value 1
   : list value 2
   : list value 3
   : [ 2, 3, 4 ]

   It gives me a quick function to call when debuging functional javascript
* org-mode
** preview latex formulas                                          :org:math:
   :PROPERTIES:
   :LEARNED:  <2016-03-21 Mon>
   :END:

   #+begin_src sh :exports code
     apt-get install texlive-latex-recommended texlive-fonts-recommended dvipng
   #+end_src

   #+begin_src emacs-lisp :exports code
     (setq org-latex-create-formula-image-program 'dvipng)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
   #+end_src

   Write some LaTeX functions \(f(x) = \frac{x^3}{n}\).

   Display inline latex by pressing ~C-c C-x C-l~

** mathjax with argmax                                             :org:math:
   :PROPERTIES:
   :LEARNED:  <2016-03-22 Tue>
   :END:

   The default mathjax is old, simply replace it

   #+begin_src org
     ,#+HTML_MATHJAX: path:"http://cdn.mathjax.org/mathjax/latest/MathJax.js"
   #+end_src

   And add the operator:
   #+begin_src org
     ,#+BEGIN_HTML
     \(
     \DeclareMathOperator*{\argmax}{argmax}
     \)
     ,#+END_HTML

     $ \argmax_{c_i} $
   #+end_src
** CSS examples                                                     :org:css:
   :PROPERTIES:
   :LEARNED:  <2016-03-27 Tue>
   :END:
   #+begin_src css
     body {
         padding: 0;
         background: #eee none repeat scroll 0 0;
         max-width: 1000px;
         margin: 0px auto;
         padding: 1em;
         color: #000;
         font-family: "Open Sans", "Bitstream Vera Sans", "Verdana", sans-serif;
         line-height: 1.4em;
         font-size: 90%;
     }
   #+end_src
** Graphs                                                           :org:dot:
   :PROPERTIES:
   :LEARNED:  <2016-03-27 Tue>
   :END:

   #+begin_src dot :file dot-example.png
     digraph {
       a -> b;
       b -> c:
       c -> a;
     }
   #+end_src

   #+RESULTS:
   [[file:dot-example.png]]
